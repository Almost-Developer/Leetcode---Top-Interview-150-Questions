Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

Approach:
1. As it is sorted and the question is a searching algorithm, we shall use binary search.
2. Apply a lower bound binary search

Solution.
class HelloWorld {
    
    public static int searchInsertPosition(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        int potential = nums.length;
        
        while(low <= high) {
            int mid = (low+high)/2;
            if(nums[mid] == target)  return mid;
            else if(nums[mid] >= target ) {
                potential = mid;
                high = mid-1;
            }
            else low = mid+1;
        }
        return potential;
    }
    
    public static void main(String[] args) {
        int[] nums = {1,3,5,6};
        int target = 7;
        
        int res = searchInsertPosition(nums, target);
        System.out.println(res);
    }
}
