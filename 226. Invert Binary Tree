226. Invert Binary Tree

Given the root of a binary tree, invert the tree, and return its root.

Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []
 
Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Solution.
class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}
class BinaryTree {
    static Node root;
    
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        
        tree.root = new Node(2);
        tree.root.left = new Node(1);
        tree.root.right = new Node(3);
        
        System.out.println(
            "Inorder traversal of the constructed tree is");
        tree.inOrder();
        System.out.println("");
 
        tree.invertBinaryTree(root);
 
        System.out.println(
            "Inorder traversal of the mirror tree is");
        tree.inOrder();
    }
    
    void inOrder() { inOrder(root); }
 
    void inOrder(Node node)
    {
        if (node == null) return;
        System.out.print(node.data + " ");
        inOrder(node.left);
        inOrder(node.right);
    }
    
    public static Node invertBinaryTree(Node a){
        if(a == null) return null;
        Node temp = a.left;
        a.left = invertBinaryTree(a.right);
        a.right = invertBinaryTree(temp);
        return a;
    }
}
