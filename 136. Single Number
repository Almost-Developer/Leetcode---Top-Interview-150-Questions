Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

Constraints:
1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

Approach. 
1. with bit manipulation we can discard same value with xor operator.
2. after applying xor operator to all the elements, the single number shall remain. aka our answer.

Solution.
class HelloWorld {
    public static void main(String[] args) {
        int[] nums = {4,1,2,1,2};
        int res = singleNumber(nums);
        System.out.print(res);
    }
    public static int singleNumber(int[] nums) {
        int pot = 0;
        for(int i=0; i<nums.length; i++) {
            pot = pot ^ nums[i];
        }
        return pot;
    }
}
