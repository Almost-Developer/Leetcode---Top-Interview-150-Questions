141. Linked List Cycle

Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.
 
Example 1:
￼
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
￼
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
￼
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 
Constraints:
* The number of the nodes in the list is in the range [0, 104].
* -105 <= Node.val <= 105
* pos is -1 or a valid index in the linked-list.

Approach:
1. Take two pointers slow and fast.
2. Incremwnt the slow pointer by one step and increment the fast pointer by two steps
3. if both pointers met then the linkedlist has a cycle.

Solution.
import java.util.*;

public class LinkedList{
    
    static Node head;
    static class Node {
        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }
    
    static public void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
    
    static boolean detectLoop(Node head) {
        if(head == null) return false;
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) return true;
        }
        return false;
    }
    
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        
        list.push(20);
        list.push(4);
        list.push(15);
        list.push(10);
        list.push(26);
        list.push(17);
        list.push(9);
        
        //create loop for testing
        list.head.next.next.next.next.next = head.next;
        
        boolean res = detectLoop(head);
        System.out.print(res);
    }
}
