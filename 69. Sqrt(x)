Sqrt(x)

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.
You must not use any built-in exponent function or operator.
For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

Example 1:
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

Constraints:
0 <= x <= 231 - 1

Approach.
1. we have to find out only lower bound after applying binary search.
2. compare the mid value's sqaure with the nummber and accordingly increase or decrease it.

Solution.
class HelloWorld {
    public static void main(String[] args) {
        int num = 8;
        int res = squareRoot(num);
        System.out.println(res);
    }
    public static int squareRoot(int num) {
        long low = 0;
        long high = num;
        long potential = 0;
        while(low <= high) {
            long mid = (low+high)/2;
            if(mid*mid == num) return (int)mid;
            else if(mid*mid <= num) {
                potential = mid;
                low = mid+1;
            }
            else high = mid-1;
        }
        return (int)potential;
    }
}
